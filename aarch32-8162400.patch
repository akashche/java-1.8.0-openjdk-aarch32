--- openjdk/hotspot/src/cpu/aarch32/vm/interp_masm_aarch32.cpp	2016-07-22 16:08:02.000000000 +0300
+++ openjdk/hotspot/src/cpu/aarch32/vm/interp_masm_aarch32.cpp	2016-07-22 16:08:02.000000000 +0300
@@ -1596,7 +1596,7 @@
 
   ldr(rscratch1, mdo_addr);
   eor(obj, obj, rscratch1);
-  tst(obj, TypeEntries::type_klass_mask);
+  bics(rscratch1, obj, ~TypeEntries::type_klass_mask);
   b(next, Assembler::EQ); // klass seen before, nothing to
                            // do. The unknown bit may have been
                            // set already but no need to check.
@@ -1613,7 +1613,7 @@
   // profiling to this obj's klass
   ldr(rscratch1, mdo_addr);
   eor(obj, obj, rscratch1);
-  tst(obj, TypeEntries::type_klass_mask);
+  bics(rscratch1, obj, ~TypeEntries::type_klass_mask);
   b(next, Assembler::EQ);
 
   // different than before. Cannot keep accurate profile.
--- openjdk/hotspot/src/cpu/aarch32/vm/templateTable_aarch32.cpp	2016-07-22 16:08:02.000000000 +0300
+++ openjdk/hotspot/src/cpu/aarch32/vm/templateTable_aarch32.cpp	2016-07-22 16:08:02.000000000 +0300
@@ -1894,7 +1894,9 @@
           // being compiled, add a second test to make sure the overflow
           // function is called only once every overflow_frequency.
           const int overflow_frequency = 1024;
-          __ ands(r1, r1, overflow_frequency - 1);
+          const int of_mask_lsb = exact_log2(overflow_frequency);
+          __ bfc(r1, of_mask_lsb, 32 - of_mask_lsb);
+          __ cmp(r1, 0);
           __ b(backedge_counter_overflow, Assembler::EQ);
 
         }
