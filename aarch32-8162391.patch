--- openjdk/hotspot/src/cpu/aarch32/vm/interp_masm_aarch32.cpp	2016-07-22 14:22:55.000000000 +0300
+++ openjdk/hotspot/src/cpu/aarch32/vm/interp_masm_aarch32.cpp	2016-07-22 14:22:55.000000000 +0300
@@ -1461,12 +1461,14 @@
     bind(L);
   }
 
+#ifdef DTRACE_ENABLED
   {
     SkipIfEqual skip(this, &DTraceMethodProbes, false);
     get_method(c_rarg1);
     call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::dtrace_method_entry),
                  rthread, c_rarg1);
   }
+#endif
 
   // RedefineClasses() tracing support for obsolete method entry
   if (RC_TRACE_IN_RANGE(0x00001000, 0x00002000)) {
@@ -1502,6 +1504,7 @@
     NOT_CC_INTERP(pop(state));
   }
 
+#ifdef DTRACE_ENABLED
   {
     SkipIfEqual skip(this, &DTraceMethodProbes, false);
     NOT_CC_INTERP(push(state));
@@ -1510,6 +1513,7 @@
                  rthread, c_rarg1);
     NOT_CC_INTERP(pop(state));
   }
+#endif
 }
 
 
--- openjdk/hotspot/src/cpu/aarch32/vm/sharedRuntime_aarch32.cpp	2016-07-22 14:22:56.000000000 +0300
+++ openjdk/hotspot/src/cpu/aarch32/vm/sharedRuntime_aarch32.cpp	2016-07-22 14:22:56.000000000 +0300
@@ -1761,6 +1761,7 @@
   // We have all of the arguments setup at this point. We must not touch any register
   // argument registers at this point (what if we save/restore them there are no oop?
 
+#ifdef DTRACE_ENABLED
   {
     SkipIfEqual skip(masm, &DTraceMethodProbes, false);
     // protect the args we've loaded
@@ -1771,6 +1772,7 @@
       rthread, c_rarg1);
     restore_args(masm, total_c_args, c_arg, out_regs);
   }
+#endif
 
   // RedefineClasses() tracing support for obsolete method entry
   if (RC_TRACE_IN_RANGE(0x00001000, 0x00002000)) {
@@ -1934,7 +1936,7 @@
     __ bind(unlock_done);
   }
 
-
+#ifdef DTRACE_ENABLED
   {
     SkipIfEqual skip(masm, &DTraceMethodProbes, false);
     save_native_result(masm, ret_type, stack_slots);
@@ -1944,6 +1946,7 @@
          rthread, c_rarg1);
     restore_native_result(masm, ret_type, stack_slots);
   }
+#endif
 
   __ reset_last_Java_frame(false, true);
 
--- openjdk/hotspot/src/cpu/aarch32/vm/templateTable_aarch32.cpp	2016-07-22 14:22:56.000000000 +0300
+++ openjdk/hotspot/src/cpu/aarch32/vm/templateTable_aarch32.cpp	2016-07-22 14:22:56.000000000 +0300
@@ -3616,6 +3616,7 @@
     // not using compressed oops
     __ store_klass(r0, r2);      // store klass last
 
+#ifdef DTRACE_ENABLED
     {
       SkipIfEqual skip(_masm, &DTraceAllocProbes, false);
       // Trigger dtrace event for fastpath
@@ -3625,6 +3626,7 @@
       __ pop(atos); // restore the return value
 
     }
+#endif
     __ b(done);
   }
 
